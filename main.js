// Generated by CoffeeScript 1.6.1
(function() {
  var Context, Line, Point;

  Context = (function() {

    function Context(id, w, h) {
      this.w = w;
      this.h = h;
      this.canvas = document.getElementById(id);
      this.canvas.width = this.w;
      this.canvas.height = this.h;
      this.ctx = this.canvas.getContext('2d');
    }

    Context.prototype.setBg = function(color) {
      this.ctx.fillStyle = color;
      return this.ctx.fillRect(0, 0, this.w, this.h);
    };

    Context.prototype.setColor = function(color) {
      return this.ctx.strokeStyle = color;
    };

    return Context;

  })();

  Point = (function() {

    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.draw = function() {
      this.ctx.fillStyle = 'rgb(255,255,245)';
      return this.ctx.fillRect(this.x - 1, this.y - 1, 3, 3);
    };

    return Point;

  })();

  Line = (function() {

    function Line(point1, point2) {
      this.point1 = point1;
      this.point2 = point2;
    }

    Line.prototype.draw = function() {
      this.ctx.beginPath();
      this.ctx.moveTo(this.point1.x, this.point1.y);
      this.ctx.lineTo(this.point2.x, this.point2.y);
      return this.ctx.stroke();
    };

    return Line;

  })();

  window.addEventListener('load', function() {
    var ctx, draw, prevPoint;
    ctx = new Context('canvas', window.innerWidth, window.innerHeight - 5);
    ctx.setBg('rgb(111, 78, 55)');
    ctx.setColor('rgb(250,250,255)');
    Line.prototype.ctx = ctx.ctx;
    Point.prototype.ctx = ctx.ctx;
    prevPoint = null;
    draw = false;
    ctx.canvas.addEventListener('mousedown', function(ev) {
      draw = true;
      prevPoint = new Point(ev.clientX, ev.clientY);
      return prevPoint.draw();
    });
    ctx.canvas.addEventListener('mouseup', function() {
      draw = false;
      return prevPoint.draw();
    });
    return ctx.canvas.addEventListener('mousemove', function(ev) {
      var line, point;
      if (!draw || Math.random() > 0.4) {
        return;
      }
      point = new Point(ev.clientX, ev.clientY);
      line = new Line(point, prevPoint);
      line.draw();
      return prevPoint = point;
    });
  });

}).call(this);
